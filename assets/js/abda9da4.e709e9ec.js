"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7698],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return m},MDXProvider:function(){return d},mdx:function(){return f},useMDXComponents:function(){return p},withMDXComponents:function(){return s}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),s=function(e){return function(n){var t=p(n.components);return a.createElement(e,i({},n,{components:t}))}},p=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),s=p(t),d=r,h=s["".concat(l,".").concat(d)]||s[d]||u[d]||i;return t?a.createElement(h,o(o({ref:n},m),{},{components:t})):a.createElement(h,o({ref:n},m))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=h;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},12038:function(e,n,t){t.d(n,{EO:function(){return o},O1:function(){return l},Rr:function(){return c}});var a,r=t(67294),i=t(44256);function l(e){return r.createElement("a",{href:a+e.file},e.file)}function o(e){return r.createElement("a",{href:a+e.file},e.children)}a=(0,i.isInternal)()?"https://www.internalfb.com/code/fbsource/fbcode/":"https://github.com/facebookincubator/Glean/tree/master/";var c=function(e){e.children;var n=e.internal,t=e.external;return(0,i.fbContent)({internal:r.createElement("code",null,n),external:r.createElement("code",null,t)})}},52638:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return d}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),l=t(44256),o=t(12038),c=["components"],m={id:"all",title:'The special "all" schema',sidebar_label:'The special "all" schema'},s=void 0,p={unversionedId:"schema/all",id:"schema/all",isDocsHomePage:!1,title:'The special "all" schema',description:"There is a special schema known as the all schema, defined in .",source:"@site/docs/schema/all.md",sourceDirName:"schema",slug:"/schema/all",permalink:"/docs/schema/all",editUrl:"https://github.com/facebookincubator/Glean/tree/main/glean/website/docs/schema/all.md",tags:[],version:"current",frontMatter:{id:"all",title:'The special "all" schema',sidebar_label:'The special "all" schema'},sidebar:"someSidebar",previous:{title:"Changing a schema",permalink:"/docs/schema/changing"},next:{title:"Workflow",permalink:"/docs/schema/workflow"}},d=[],u={toc:d};function h(e){var n=e.components,t=(0,r.Z)(e,c);return(0,i.mdx)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)(l.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,"There is a special schema known as the ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema, defined in ",(0,i.mdx)(o.O1,{file:"glean/schema/source/facebook/schema.angle",mdxType:"SrcFile"}),".")),(0,i.mdx)(l.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("p",null,"There is a special schema known as the ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema, defined in ",(0,i.mdx)(o.O1,{file:"glean/schema/source/schema.angle",mdxType:"SrcFile"}),".")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema is used to resolve names to particular predicates and\ntypes when the version in omitted. This matters in a few places:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},"When Thrift types are generated from the schema, the types and\npredicates from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema determine which names are\nunversioned in the generated Thrift. For example, if the ",(0,i.mdx)("inlineCode",{parentName:"p"},"all"),"\nschema contains ",(0,i.mdx)("inlineCode",{parentName:"p"},"src.1"),", then the predicate ",(0,i.mdx)("inlineCode",{parentName:"p"},"src.File.1")," will be\nsimply called ",(0,i.mdx)("inlineCode",{parentName:"p"},"File")," in the generated Thrift; otherwise it would be\ncalled ",(0,i.mdx)("inlineCode",{parentName:"p"},"File_1"),".")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},"When an ",(0,i.mdx)("a",{parentName:"p",href:"../../angle/intro"},"Angle query")," mentions an unversioned predicate or type, the\nname is resolved to a particular version of that predicate or type\nusing the current ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema.")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("p",{parentName:"li"},"When deriving a predicate with the CLI tool, like ",(0,i.mdx)("inlineCode",{parentName:"p"},"glean derive\npython.TargetUses"),"."))),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema is defined like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"schema all.6 :\n  src.1,\n  python.3,\n  code.18\n")),(0,i.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},(0,i.mdx)("strong",{parentName:"p"},"Multiple versions of ",(0,i.mdx)("inlineCode",{parentName:"strong"},"all"))),(0,i.mdx)("p",{parentName:"div"},"This is a rather specialised scenario, but it might be necessary to\nhave multiple versions of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," schema during a schema\nmigration. We can code-generate the Thrift types from each version of\n",(0,i.mdx)("inlineCode",{parentName:"p"},"all")," separately, and clients can select at build time which version\nthey want to use. This enables incremental migration of code from one\nschema to another schem."))))}h.isMDXComponent=!0}}]);